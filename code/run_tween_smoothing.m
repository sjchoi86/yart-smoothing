function [q_revs_hat,idxs_a,idxs_b,idxs_c] = run_tween_smoothing(secs,q_revs,tick_smt_start,n_a,n_b,n_c)
%
% Run smoothing for tweening
%

dt = secs(2)-secs(1);
q_revs_hat = q_revs;
n_concat = n_a+n_b+n_c;
[A_vel,A_acc,A_jerk] = get_A_vel_acc_jerk(n_concat,dt);
dim = size(q_revs,2);
for d_idx = 1:dim % for each dim
    x_d = q_revs_hat(:,d_idx);
    idxs_a = (tick_smt_start-n_a):(tick_smt_start-1);
    idxs_b = (tick_smt_start):(tick_smt_start+n_b-1);
    idxs_c = (tick_smt_start+n_b):(tick_smt_start+n_b+n_c-1);
    x_a = x_d(idxs_a,:); x_b = x_d(idxs_b,:); x_c = x_d(idxs_c,:);
    % cost function
    fun = @(x)( ...
        get_tween_smoothing_cost(x_a,x,x_c,A_vel,A_acc,A_jerk,'cost_type','a') + ...
        get_tween_smoothing_cost(x_a,x,x_c,A_vel,A_acc,A_jerk,'cost_type','j') ...
        );
    x_init = x_b;
    A_ineq = []; b_ineq = []; A_eq = []; b_eq = [];
    optm_tol = 1e-8; step_tol = 1e-8; max_iter = 10000;
    opt = optimoptions('fmincon', ...
        'OptimalityTolerance', optm_tol, ...
        'StepTolerance', step_tol, ...
        'MaxFunctionEvaluations', max_iter,...
        'MaxIterations', max_iter, ...
        'Algorithm','interior-point', ...
        'Display', 'off');
    [x_hat,fval,exit_flag] = fmincon(...
        fun,...
        x_init,...
        A_ineq,b_ineq,...
        A_eq,b_eq,...
        [],[],[],opt);
    fprintf("[%d/%d] ",d_idx,dim);
    print_fmincon_exit_flag(exit_flag);
    % Append
    x_d(idxs_b,:) = x_hat;
    q_revs_hat(:,d_idx) = x_d;
end